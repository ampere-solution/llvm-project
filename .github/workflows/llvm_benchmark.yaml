name: CICD-benchmark-banshee

# Controls when the workflow will run  
on:
  push:  
    branches: [ "main" ]       
  pull_request: 
    branches: [ "main" ]    
  workflow_dispatch: 

jobs:
  LLVM_build:
    strategy:
      matrix:
        arch: [arm64]
        # arch: [arm64, x86]
        
        
    # runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-genoa' || 'arc-runner-set-ampere14 ' }}
    # runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-x86' || 'arc-runner-set-ampere' }}

    #   build-and-push: 
    # runs-on: arc-runner-set-ampere14
    runs-on: arc-runners-banshee-llvm

    steps:
      - name: Log Operating System Details
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          uname -a
          lsb_release -a || cat /etc/os-release
          lscpu
          
      
      - name: Checkout LLVM source code
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3

      - name: Configure LLVM build
        run: |
          mkdir -p llvm-project/build
          cd llvm-project/build
          cmake -G Ninja \
            -DLLVM_ENABLE_PROJECTS="clang" \
            -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD="all"
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            ../llvm


      - name: Build LLVM
        run: |
          cd llvm-project/build
          ninja
        env:
          LLVM_PARALLEL_COMPILE_JOBS: ${{ matrix.arch == 'x86' && 8 || 192 }}

      - name: Display build information
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          echo "Build completed on $(date)"


      - name: Clone LLVM test suite
        run: |
          git clone https://github.com/llvm/llvm-test-suite.git test-suite

      - name: Set up test suite build directory
        run: mkdir test-suite-build

      - name: Install Tcl
        run: |
          sudo apt-get update
          sudo apt-get install -y tcl

      - name: Configure test suite
        run: |
          cd test-suite-build
          cmake -G Ninja \
            -DCMAKE_C_COMPILER=${{ github.workspace }}/llvm-project/build/bin/clang \
            -DCMAKE_CXX_COMPILER=${{ github.workspace }}/llvm-project/build/bin/clang++ \
            -DTEST_SUITE_RUN_TYPE=ref \
            -DTEST_SUITE_SUBDIRS=MultiSource \
            ../test-suite

      - name: Run benchmark
        run: |
          cd test-suite-build
          ninja

      - name: Execute tests
        run: |
          cd test-suite-build
          # ../llvm-project/build/bin/llvm-lit -v -j 1 -o results.json .
          ../llvm-project/build/bin/llvm-lit -v -j ${{ env.JOBS }} -o results.json .
        env:
          JOBS: 192

      - name: Install analysis tools
        run: |
          # sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install pandas scipy

      - name: Analyze benchmark results
        run: |
          cd test-suite
          python3 utils/compare.py ../test-suite-build/results.json
